@model IEnumerable<BookCatalogue.UIWeb.DTO.BookDTO>

@{
    ViewData["Title"] = "Index";
}

<h1>Books</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    Search & Filters:
    <div class="form-actions no-color">
        <p>
            Title: 
            <input type="text" name="SearchStringTitle" value="@ViewData["CurrentFilterTitle"]" />
        </p>
        <p>
            Author: 
            <input type="text" name="SearchStringAuthor" value="@ViewData["CurrentFilterAuthor"]" />
        </p>
        <p>
            Released before:
            <input type="number" name="SearchNumberReleaseYearBefore" value="@ViewData["CurrentFilterReleaseYearBefore"]" />
        </p>
        <p>
            Released after:
            <input type="number" name="SearchNumberReleaseYearAfter" value="@ViewData["CurrentFilterReleaseYearAfter"]" />
        </p>
        <p>
            Genre:
            <select name="SearchStringGenre">
                <option value=""></option>
                @foreach (var genre in Enum.GetValues(typeof(Genre)))
                {
                    <!option value="@genre" @(ViewData["CurrentFilterGenre"] != null && ViewData["CurrentFilterGenre"].ToString() == genre.ToString() ? "selected" : "")>@genre</!option>
                }
            </select>
        </p>
        <p>
            Language:
            <select name="SearchStringLanguage">
                <option value=""></option>
                @foreach (var language in Enum.GetValues(typeof(Language)))
                {
                    <!option value="@language" @(ViewData["CurrentFilterLanguage"] != null && ViewData["CurrentFilterLanguage"].ToString() == language.ToString() ? "selected" : "")>@language</!option>
                }
            </select>
        </p>
    </div>
    <input type="submit" value="Search" class="btn btn-default" />
    <a asp-action="Index">Back to Full List</a>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="Title" asp-route-currentSort="@ViewData["CurrentSort"]">@Html.DisplayNameFor(model => model.Title)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="Release" asp-route-currentSort="@ViewData["CurrentSort"]">@Html.DisplayNameFor(model => model.ReleaseYear)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="Author" asp-route-currentSort="@ViewData["CurrentSort"]">@Html.DisplayNameFor(model => model.Author.FullName)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="Language" asp-route-currentSort="@ViewData["CurrentSort"]">@Html.DisplayNameFor(model => model.Language)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="Genre" asp-route-currentSort="@ViewData["CurrentSort"]">@Html.DisplayNameFor(model => model.Genre)</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseYear)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author.FullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Language)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
